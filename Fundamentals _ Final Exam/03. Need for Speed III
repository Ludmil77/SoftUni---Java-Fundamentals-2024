import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class _03_Need_for_Speed_III
{
    public static void main(String[] args)
    {
        List<NeedForSpeed> needForSpeedList = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());

        for(int i = 0; i < n; i++)
        {
            String[] comArgs = scanner.nextLine().split("\\|");
            needForSpeedList = createNewCar(comArgs, needForSpeedList);
        }
        String command = scanner.nextLine();
        while(!command.equals("Stop"))
        {
            String[] comArgs = command.split(" : ");
            String first = comArgs[0];
            String car = comArgs[1];
            if(first.equals("Drive"))
            {
                int distance = Integer.parseInt(comArgs[2]);
                int fuel = Integer.parseInt(comArgs[3]);
                needForSpeedList = driveExistingCar(needForSpeedList, car, distance, fuel);
            }
            else if(first.equals("Refuel"))
            {
                int fuel = Integer.parseInt(comArgs[2]);
                needForSpeedList = refuelExistingCar(needForSpeedList, car, fuel);
            }
            else if(first.equals("Revert"))
            {
                int kilometers = Integer.parseInt(comArgs[2]);
                needForSpeedList = revertDecreaseMileageOfExistingCar(needForSpeedList, car, kilometers);
            }
            command = scanner.nextLine();
        }
        printFinalState(needForSpeedList);
    }
    public static  List<NeedForSpeed> createNewCar(String[] comArgs, List<NeedForSpeed> needForSpeedList)
    {
        //{car}|{mileage}|{fuel}
        String car = comArgs[0];
        int mileage = Integer.parseInt(comArgs[1]);
        int fuel = Integer.parseInt(comArgs[2]);
        NeedForSpeed needForSpeed = new NeedForSpeed(car, mileage, fuel);
        needForSpeedList.add(needForSpeed);
        return  needForSpeedList;
    }
    public static  List<NeedForSpeed> driveExistingCar(List<NeedForSpeed> needForSpeedList, String car, int distance, int fuel)
    {
        for(int i = 0; i < needForSpeedList.size(); i++)
        {
            if(needForSpeedList.get(i).getCar().equals(car))
            {
                if(needForSpeedList.get(i).getFuel() >= fuel)
                {
                    int currentFuel = needForSpeedList.get(i).getFuel();
                    needForSpeedList.get(i).setFuel(currentFuel - fuel);
                    int currentMileage = needForSpeedList.get(i).getMileage();
                    needForSpeedList.get(i).setMileage(currentMileage + distance);
                    System.out.printf("%s driven for %d kilometers. %d liters of fuel consumed.%n", car, distance, fuel);
                    if(currentMileage + distance >= 100000)
                    {
                        needForSpeedList.remove(i);
                        System.out.printf("Time to sell the %s!%n", car);
                    }

                }
                else
                {
                    System.out.println("Not enough fuel to make that ride");
                }
                break;
            }

        }
        return  needForSpeedList;
    }
    public static List<NeedForSpeed> refuelExistingCar(List<NeedForSpeed> needForSpeedList, String car, int fuel)
    {

        for(int i = 0; i < needForSpeedList.size(); i++)
        {
            if(needForSpeedList.get(i).getCar().equals(car))
            {
                int currentFuel = needForSpeedList.get(i).getFuel();
                int refueledLiters = 0;
                if(currentFuel + fuel > 75)
                {
                     refueledLiters = 75 - currentFuel;
                }
                else
                {
                    refueledLiters = fuel;
                }
                needForSpeedList.get(i).setFuel(refueledLiters + currentFuel);
                System.out.printf("%s refueled with %d liters%n", car, refueledLiters);
                break;
            }
        }
        return needForSpeedList;
    }
    public static List<NeedForSpeed> revertDecreaseMileageOfExistingCar(List<NeedForSpeed> needForSpeedList, String car,  int kilometers)
    {
        for(int i = 0; i < needForSpeedList.size(); i++)
        {
            if(needForSpeedList.get(i).getCar().equals(car))
            {
                int currentMileage = needForSpeedList.get(i).getMileage();
                if(currentMileage - kilometers < 10000)
                {
                    needForSpeedList.get(i).setMileage(10000);
                }
                else
                {
                    needForSpeedList.get(i).setMileage(currentMileage - kilometers);
                    System.out.printf("%s mileage decreased by %d kilometers%n", car, kilometers);
                }
                break;
            }
        }
        return  needForSpeedList;
    }
    public static void printFinalState(List<NeedForSpeed> needForSpeedList)
    {
        for(NeedForSpeed car : needForSpeedList)
        {
            System.out.printf("%s -> Mileage: %d kms, Fuel in the tank: %d lt.%n", car.getCar(), car.getMileage(), car.getFuel());
        }
    }
}
class NeedForSpeed
{

    private String car;
    private int mileage;
    private int fuel;

    NeedForSpeed(String car, int mileage, int fuel) {
        this.car = car;
        this.mileage = mileage;
        this.fuel = fuel;
    }

    public String getCar() {
        return car;
    }

    public void setCar(String car) {
        this.car = car;
    }

    public int getMileage() {
        return mileage;
    }

    public void setMileage(int mileage) {
        this.mileage = mileage;
    }

    public int getFuel() {
        return fuel;
    }

    public void setFuel(int fuel) {
        this.fuel = fuel;
    }
}
