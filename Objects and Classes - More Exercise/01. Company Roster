import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

public class _01_Company_Roster
{
    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        List<Employee> employeeList = new ArrayList<>();
        List<Employee> departAverageSalary = new ArrayList<>();
        int n = Integer.parseInt(scanner.nextLine());

        for(int i = 0; i < n; i++)
        {
            String[] comArgs = scanner.nextLine().split(" ");
            String name = comArgs[0];
            double salary = Double.parseDouble(comArgs[1]);
            String position = comArgs[2];
            String department = comArgs[3];
            departAverageSalary = listDepartmentAverageSalary(departAverageSalary, department, salary);

            Employee employee = null;
            if(comArgs.length > 4)
            {
                String email = checkForEmail(comArgs);
                int age = checkForAge(comArgs);

                employee = new Employee(name, salary, position, department, email, age);
            }
            else
            {
                String email = "n/a";
                int age = - 1;
                employee = new Employee(name, salary, position, department, email, age);
            }

            employeeList.add(employee);
        }
        employeeList.sort(Comparator.comparing(Employee::getSalary, Comparator.reverseOrder()));
        printFinalState(employeeList, departAverageSalary);
    }
    public static String checkForEmail(String[] comArgs)
    {
        String current = comArgs[4];
        int index = current.indexOf('@');
        if(index == -1)
        {
            current = "n/a";
        }
        return current;
    }
    public static int checkForAge(String[] comArgs)
    {
        String current = comArgs[4];
        int age = 0;
        int index = current.indexOf('@');
        if(index == -1)
        {
            age = Integer.parseInt(current);
        }
        else if(index != - 1 && comArgs.length == 5)
        {
            age = - 1;
        }
        else if(comArgs.length == 6)
        {
            age = Integer.parseInt(comArgs[5]);
        }
        return age;
    }
    public static List<Employee> listDepartmentAverageSalary(List<Employee> departAverageSalary,String department, double salary)
    {
        Employee depAverSalary = null;
        if(departAverageSalary.size() == 0)
        {
            int counter = 1;
             depAverSalary = new Employee(department, salary, counter);
            departAverageSalary.add(depAverSalary);
        }
        else
        {
            boolean isExist = false;
            for(Employee employee : departAverageSalary)
            {
                 if(employee.getDepartment().equals(department))
                 {
                     employee.setSalary(employee.getSalary() + salary);
                     employee.setCounter(employee.getCounter() + 1);
                     isExist = true;
                     break;
                 }
            }
            if(!isExist)
            {
                int counter = 1;
                depAverSalary = new Employee(department, salary, counter);
                departAverageSalary.add(depAverSalary);
            }
        }
       return  departAverageSalary;
    }
    public static void printFinalState( List<Employee> employeeList,  List<Employee> departAverageSalary)
    {
        String maxDepartment = "";
        departAverageSalary.sort(Comparator.comparing(Employee::getSalary, Comparator.reverseOrder()));
        for(int i = 0; i < departAverageSalary.size(); i++)
        {
           departAverageSalary.get(i).setSalary(departAverageSalary.get(i).getSalary() / departAverageSalary.get(i).getCounter());
        }
        departAverageSalary.sort(Comparator.comparing(Employee::getSalary, Comparator.reverseOrder()));
        for(int i = 0; i < departAverageSalary.size(); i++)
        {
            maxDepartment = departAverageSalary.get(0).getDepartment();
            break;
        }
        System.out.printf("Highest Average Salary: %s%n",  maxDepartment);
        for(Employee employee : employeeList)
        {
            if(employee.getDepartment().equals(maxDepartment))
            {
                System.out.printf("%s %.2f %s %d%n",
                        employee.getName(),
                        employee.getSalary(),
                        employee.getEmail(),
                        employee.getAge());
            }
        }

    }
}
class Employee
{
    //name, salary, position, department, email, and age
    private String name;
    private double salary;
    private String position;
    private String department;
    private String email;
    private int age;

    Employee(String name, double salary, String position, String department, String email, int age)
    {
        this.name = name;
        this.salary = salary;
        this.position = position;
        this.department = department;
        this.email = email;
        this.age = age;
    }
    private int counter;
    Employee(String department, double salary, int counter)
    {
        this.department = department;
        this.salary = salary;
        this.counter = counter;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getCounter() {
        return counter;
    }

    public void setCounter(int counter) {
        this.counter = counter;
    }
}
