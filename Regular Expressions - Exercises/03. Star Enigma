import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class _03_Star_Enigma
{
    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());
        List<String> attackedPlanets = new ArrayList<>();
        List<String> destroyedPlanets = new ArrayList<>();
        for(int i = 0; i < n; i++)
        {
            String input = scanner.nextLine();
            String message = decrypteMessage(input);
            final String regex = "@(?<planetName>[A-Z|a-z]+)[^@\\-!:>]*:(?<population>[\\d]+)[^@\\-!:>]*!(?<type>[AD]{1})![^@\\-!:>]*->(?<soldierCount>[\\d]+)";
            final String string = message;

            final Pattern pattern = Pattern.compile(regex);
            final Matcher matcher = pattern.matcher(string);

            while (matcher.find())
            {
               String planetName = matcher.group("planetName");
               char type = matcher.group("type").charAt(0);
               if(type == 'A')
               {
                   attackedPlanets.add(planetName);
               }
               else if(type == 'D')
               {
                   destroyedPlanets.add(planetName);
               }
            }
        }
        printFinalState(attackedPlanets, destroyedPlanets);
    }
    public static String decrypteMessage(String input)
    {
        //s, t, a, r
        int countKey = 0;
        List<Character> chars = new ArrayList<>();
        chars.add('s');chars.add('t');chars.add('a');chars.add('r');
        chars.add('S');chars.add('T');chars.add('A');chars.add('R');
        for(int i = 0; i < input.length(); i++)
        {
            char current = input.charAt(i);
            if(chars.contains(current))
            {
                countKey++;
            }
        }
        String message = "";
        for(int i = 0; i < input.length(); i++)
        {
            char current = input.charAt(i);
            message += (char)(current - countKey);
        }
        return message;
    }
    public static void printFinalState( List<String> attackedPlanets,  List<String> destroyedPlanets)
    {
        Collections.sort(attackedPlanets);
        Collections.sort(destroyedPlanets);
        System.out.printf("Attacked planets: %d%n", attackedPlanets.size());

        if(attackedPlanets.size() > 0)
        {
            for(String attPlanet : attackedPlanets)
            {
                System.out.printf("-> %s%n", attPlanet);
            }
        }
        System.out.printf("Destroyed planets: %d%n", destroyedPlanets.size());
        if(destroyedPlanets.size() > 0)
        {
            for(String desPlanet : destroyedPlanets)
            {
                System.out.printf("-> %s%n", desPlanet);
            }
        }
    }
}
